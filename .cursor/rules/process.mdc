# 开发流程规则

## 背景
- 适用于所有涉及规划、代码实现和问题解决的任务。
- 规则类型：Always（始终生效）。
- 目标：确保代码生成遵循结构化的开发流程，保持增量进步和可追溯性。

## 规划与分阶段
- 将复杂任务拆分为 3-5 个阶段。
- 在 `IMPLEMENTATION_PLAN.md` 中记录每个阶段，格式如下：
  ```markdown
  ## Stage N: [阶段名称]
  **Goal**: [具体交付物]
  **Success Criteria**: [可测试的结果]
  **Tests**: [具体测试用例]
  **Status**: [Not Started|In Progress|Complete]
  ```
- 随着开发进展更新阶段状态。
- 所有阶段完成后删除 `IMPLEMENTATION_PLAN.md` 文件。

## 实现流程
1. **理解**：
   - 分析代码库中的现有模式和约定。
   - 优先模仿现有实现，确保一致性。
2. **测试**：
   - 先编写测试用例（红灯状态）。
   - 测试需清晰描述行为，遵循项目测试框架。
3. **实现**：
   - 编写最少代码以通过测试（绿灯状态）。
   - 避免过早优化或复杂逻辑。
4. **重构**：
   - 在测试通过的前提下优化代码。
   - 确保代码简洁、可读且符合项目规范。
5. **提交**：
   - 使用清晰的提交信息，说明“为什么”并链接到 `IMPLEMENTATION_PLAN.md`（如 `Add feature X (ref: IMPLEMENTATION_PLAN.md Stage 2)`）。

## 遇到问题（3 次尝试后）
- **限制**：每个问题最多尝试 3 次，失败后停止。
- **记录失败**：
  - 列出尝试的方法。
  - 记录具体错误信息。
  - 分析失败原因。
- **研究替代方案**：
  - 查找 2-3 个类似实现（参考代码库或其他项目）。
  - 记录每种方法的优缺点。
- **反思基础问题**：
  - 是否选择了正确的抽象层级？
  - 是否可以拆分为更小的子问题？
  - 是否存在更简单的替代方案？
- **尝试不同角度**：
  - 使用不同的库或框架特性。
  - 尝试不同的架构模式。
  - 考虑移除抽象而非增加复杂性。

## 引用文件
- @file ../IMPLEMENTATION_PLAN.md
- @file ../package.json
- @file ../README.md
